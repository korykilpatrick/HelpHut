/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  InventoryItem,
  InventoryItemCreate,
  InventoryItemUpdate,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InventoryItemFromJSON,
    InventoryItemToJSON,
    InventoryItemCreateFromJSON,
    InventoryItemCreateToJSON,
    InventoryItemUpdateFromJSON,
    InventoryItemUpdateToJSON,
} from '../models/index';

export interface CreateInventoryItemRequest {
    inventoryItemCreate: InventoryItemCreate;
}

export interface DeleteInventoryItemRequest {
    id: string;
}

export interface GetInventoryItemRequest {
    id: string;
}

export interface ListInventoryRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateInventoryItemRequest {
    id: string;
    inventoryItemUpdate: InventoryItemUpdate;
}

/**
 * InventoryApi - interface
 * 
 * @export
 * @interface InventoryApiInterface
 */
export interface InventoryApiInterface {
    /**
     * 
     * @summary Create an inventory item
     * @param {InventoryItemCreate} inventoryItemCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    createInventoryItemRaw(requestParameters: CreateInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItem>>;

    /**
     * Create an inventory item
     */
    createInventoryItem(requestParameters: CreateInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItem>;

    /**
     * 
     * @summary Delete an inventory item by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    deleteInventoryItemRaw(requestParameters: DeleteInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an inventory item by ID
     */
    deleteInventoryItem(requestParameters: DeleteInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve inventory item by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    getInventoryItemRaw(requestParameters: GetInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItem>>;

    /**
     * Retrieve inventory item by ID
     */
    getInventoryItem(requestParameters: GetInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItem>;

    /**
     * 
     * @summary List inventory items
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    listInventoryRaw(requestParameters: ListInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InventoryItem>>>;

    /**
     * List inventory items
     */
    listInventory(requestParameters: ListInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InventoryItem>>;

    /**
     * 
     * @summary Update an inventory item by ID
     * @param {string} id UUID of the resource
     * @param {InventoryItemUpdate} inventoryItemUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    updateInventoryItemRaw(requestParameters: UpdateInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItem>>;

    /**
     * Update an inventory item by ID
     */
    updateInventoryItem(requestParameters: UpdateInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItem>;

}

/**
 * 
 */
export class InventoryApi extends runtime.BaseAPI implements InventoryApiInterface {

    /**
     * Create an inventory item
     */
    async createInventoryItemRaw(requestParameters: CreateInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItem>> {
        if (requestParameters['inventoryItemCreate'] == null) {
            throw new runtime.RequiredError(
                'inventoryItemCreate',
                'Required parameter "inventoryItemCreate" was null or undefined when calling createInventoryItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/inventory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryItemCreateToJSON(requestParameters['inventoryItemCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryItemFromJSON(jsonValue));
    }

    /**
     * Create an inventory item
     */
    async createInventoryItem(requestParameters: CreateInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItem> {
        const response = await this.createInventoryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an inventory item by ID
     */
    async deleteInventoryItemRaw(requestParameters: DeleteInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteInventoryItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/inventory/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an inventory item by ID
     */
    async deleteInventoryItem(requestParameters: DeleteInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInventoryItemRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve inventory item by ID
     */
    async getInventoryItemRaw(requestParameters: GetInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getInventoryItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/inventory/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryItemFromJSON(jsonValue));
    }

    /**
     * Retrieve inventory item by ID
     */
    async getInventoryItem(requestParameters: GetInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItem> {
        const response = await this.getInventoryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List inventory items
     */
    async listInventoryRaw(requestParameters: ListInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InventoryItem>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/inventory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InventoryItemFromJSON));
    }

    /**
     * List inventory items
     */
    async listInventory(requestParameters: ListInventoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InventoryItem>> {
        const response = await this.listInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an inventory item by ID
     */
    async updateInventoryItemRaw(requestParameters: UpdateInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateInventoryItem().'
            );
        }

        if (requestParameters['inventoryItemUpdate'] == null) {
            throw new runtime.RequiredError(
                'inventoryItemUpdate',
                'Required parameter "inventoryItemUpdate" was null or undefined when calling updateInventoryItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/inventory/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryItemUpdateToJSON(requestParameters['inventoryItemUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryItemFromJSON(jsonValue));
    }

    /**
     * Update an inventory item by ID
     */
    async updateInventoryItem(requestParameters: UpdateInventoryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItem> {
        const response = await this.updateInventoryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
