/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  FoodType,
  FoodTypeCreate,
  FoodTypeUpdate,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FoodTypeFromJSON,
    FoodTypeToJSON,
    FoodTypeCreateFromJSON,
    FoodTypeCreateToJSON,
    FoodTypeUpdateFromJSON,
    FoodTypeUpdateToJSON,
} from '../models/index';

export interface CreateFoodTypeRequest {
    foodTypeCreate: FoodTypeCreate;
}

export interface DeleteFoodTypeRequest {
    id: string;
}

export interface GetFoodTypeRequest {
    id: string;
}

export interface ListFoodTypesRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateFoodTypeRequest {
    id: string;
    foodTypeUpdate: FoodTypeUpdate;
}

/**
 * FoodTypesApi - interface
 * 
 * @export
 * @interface FoodTypesApiInterface
 */
export interface FoodTypesApiInterface {
    /**
     * 
     * @summary Create a new food type
     * @param {FoodTypeCreate} foodTypeCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodTypesApiInterface
     */
    createFoodTypeRaw(requestParameters: CreateFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodType>>;

    /**
     * Create a new food type
     */
    createFoodType(requestParameters: CreateFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodType>;

    /**
     * 
     * @summary Delete a food type by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodTypesApiInterface
     */
    deleteFoodTypeRaw(requestParameters: DeleteFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a food type by ID
     */
    deleteFoodType(requestParameters: DeleteFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve a food type by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodTypesApiInterface
     */
    getFoodTypeRaw(requestParameters: GetFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodType>>;

    /**
     * Retrieve a food type by ID
     */
    getFoodType(requestParameters: GetFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodType>;

    /**
     * 
     * @summary List all food types
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodTypesApiInterface
     */
    listFoodTypesRaw(requestParameters: ListFoodTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FoodType>>>;

    /**
     * List all food types
     */
    listFoodTypes(requestParameters: ListFoodTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FoodType>>;

    /**
     * 
     * @summary Update a food type by ID
     * @param {string} id UUID of the resource
     * @param {FoodTypeUpdate} foodTypeUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodTypesApiInterface
     */
    updateFoodTypeRaw(requestParameters: UpdateFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodType>>;

    /**
     * Update a food type by ID
     */
    updateFoodType(requestParameters: UpdateFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodType>;

}

/**
 * 
 */
export class FoodTypesApi extends runtime.BaseAPI implements FoodTypesApiInterface {

    /**
     * Create a new food type
     */
    async createFoodTypeRaw(requestParameters: CreateFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodType>> {
        if (requestParameters['foodTypeCreate'] == null) {
            throw new runtime.RequiredError(
                'foodTypeCreate',
                'Required parameter "foodTypeCreate" was null or undefined when calling createFoodType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/food-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FoodTypeCreateToJSON(requestParameters['foodTypeCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodTypeFromJSON(jsonValue));
    }

    /**
     * Create a new food type
     */
    async createFoodType(requestParameters: CreateFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodType> {
        const response = await this.createFoodTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a food type by ID
     */
    async deleteFoodTypeRaw(requestParameters: DeleteFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteFoodType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/food-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a food type by ID
     */
    async deleteFoodType(requestParameters: DeleteFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFoodTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a food type by ID
     */
    async getFoodTypeRaw(requestParameters: GetFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFoodType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/food-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodTypeFromJSON(jsonValue));
    }

    /**
     * Retrieve a food type by ID
     */
    async getFoodType(requestParameters: GetFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodType> {
        const response = await this.getFoodTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all food types
     */
    async listFoodTypesRaw(requestParameters: ListFoodTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FoodType>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/food-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FoodTypeFromJSON));
    }

    /**
     * List all food types
     */
    async listFoodTypes(requestParameters: ListFoodTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FoodType>> {
        const response = await this.listFoodTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a food type by ID
     */
    async updateFoodTypeRaw(requestParameters: UpdateFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFoodType().'
            );
        }

        if (requestParameters['foodTypeUpdate'] == null) {
            throw new runtime.RequiredError(
                'foodTypeUpdate',
                'Required parameter "foodTypeUpdate" was null or undefined when calling updateFoodType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/food-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FoodTypeUpdateToJSON(requestParameters['foodTypeUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodTypeFromJSON(jsonValue));
    }

    /**
     * Update a food type by ID
     */
    async updateFoodType(requestParameters: UpdateFoodTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodType> {
        const response = await this.updateFoodTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
