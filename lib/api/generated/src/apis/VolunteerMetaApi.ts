/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  VolunteerAvailabilityTime,
  VolunteerAvailabilityTimeCreate,
  VolunteerAvailabilityTimeUpdate,
  VolunteerAvailabilityZone,
  VolunteerAvailabilityZoneCreate,
  VolunteerAvailabilityZoneUpdate,
  VolunteerSkill,
  VolunteerSkillCreate,
  VolunteerSkillUpdate,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    VolunteerAvailabilityTimeFromJSON,
    VolunteerAvailabilityTimeToJSON,
    VolunteerAvailabilityTimeCreateFromJSON,
    VolunteerAvailabilityTimeCreateToJSON,
    VolunteerAvailabilityTimeUpdateFromJSON,
    VolunteerAvailabilityTimeUpdateToJSON,
    VolunteerAvailabilityZoneFromJSON,
    VolunteerAvailabilityZoneToJSON,
    VolunteerAvailabilityZoneCreateFromJSON,
    VolunteerAvailabilityZoneCreateToJSON,
    VolunteerAvailabilityZoneUpdateFromJSON,
    VolunteerAvailabilityZoneUpdateToJSON,
    VolunteerSkillFromJSON,
    VolunteerSkillToJSON,
    VolunteerSkillCreateFromJSON,
    VolunteerSkillCreateToJSON,
    VolunteerSkillUpdateFromJSON,
    VolunteerSkillUpdateToJSON,
} from '../models/index';

export interface CreateVolunteerAvailabilityTimeRequest {
    volunteerAvailabilityTimeCreate: VolunteerAvailabilityTimeCreate;
}

export interface CreateVolunteerAvailabilityZoneRequest {
    volunteerAvailabilityZoneCreate: VolunteerAvailabilityZoneCreate;
}

export interface CreateVolunteerSkillRequest {
    volunteerSkillCreate: VolunteerSkillCreate;
}

export interface DeleteVolunteerAvailabilityTimeRequest {
    id: string;
}

export interface DeleteVolunteerAvailabilityZoneRequest {
    id: string;
}

export interface DeleteVolunteerSkillRequest {
    id: string;
}

export interface GetVolunteerAvailabilityTimeRequest {
    id: string;
}

export interface GetVolunteerAvailabilityZoneRequest {
    id: string;
}

export interface GetVolunteerSkillRequest {
    id: string;
}

export interface ListVolunteerAvailabilityTimesRequest {
    limit?: number;
    offset?: number;
}

export interface ListVolunteerAvailabilityZonesRequest {
    limit?: number;
    offset?: number;
}

export interface ListVolunteerSkillsRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateVolunteerAvailabilityTimeRequest {
    id: string;
    volunteerAvailabilityTimeUpdate: VolunteerAvailabilityTimeUpdate;
}

export interface UpdateVolunteerAvailabilityZoneRequest {
    id: string;
    volunteerAvailabilityZoneUpdate: VolunteerAvailabilityZoneUpdate;
}

export interface UpdateVolunteerSkillRequest {
    id: string;
    volunteerSkillUpdate: VolunteerSkillUpdate;
}

/**
 * VolunteerMetaApi - interface
 * 
 * @export
 * @interface VolunteerMetaApiInterface
 */
export interface VolunteerMetaApiInterface {
    /**
     * 
     * @summary Create volunteer availability time
     * @param {VolunteerAvailabilityTimeCreate} volunteerAvailabilityTimeCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    createVolunteerAvailabilityTimeRaw(requestParameters: CreateVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityTime>>;

    /**
     * Create volunteer availability time
     */
    createVolunteerAvailabilityTime(requestParameters: CreateVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityTime>;

    /**
     * 
     * @summary Create volunteer availability zone
     * @param {VolunteerAvailabilityZoneCreate} volunteerAvailabilityZoneCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    createVolunteerAvailabilityZoneRaw(requestParameters: CreateVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityZone>>;

    /**
     * Create volunteer availability zone
     */
    createVolunteerAvailabilityZone(requestParameters: CreateVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityZone>;

    /**
     * 
     * @summary Create volunteer skill
     * @param {VolunteerSkillCreate} volunteerSkillCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    createVolunteerSkillRaw(requestParameters: CreateVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerSkill>>;

    /**
     * Create volunteer skill
     */
    createVolunteerSkill(requestParameters: CreateVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerSkill>;

    /**
     * 
     * @summary Delete a volunteer availability time by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    deleteVolunteerAvailabilityTimeRaw(requestParameters: DeleteVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a volunteer availability time by ID
     */
    deleteVolunteerAvailabilityTime(requestParameters: DeleteVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a volunteer availability zone by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    deleteVolunteerAvailabilityZoneRaw(requestParameters: DeleteVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a volunteer availability zone by ID
     */
    deleteVolunteerAvailabilityZone(requestParameters: DeleteVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a volunteer skill by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    deleteVolunteerSkillRaw(requestParameters: DeleteVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a volunteer skill by ID
     */
    deleteVolunteerSkill(requestParameters: DeleteVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve a volunteer availability time by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    getVolunteerAvailabilityTimeRaw(requestParameters: GetVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityTime>>;

    /**
     * Retrieve a volunteer availability time by ID
     */
    getVolunteerAvailabilityTime(requestParameters: GetVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityTime>;

    /**
     * 
     * @summary Retrieve a volunteer availability zone by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    getVolunteerAvailabilityZoneRaw(requestParameters: GetVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityZone>>;

    /**
     * Retrieve a volunteer availability zone by ID
     */
    getVolunteerAvailabilityZone(requestParameters: GetVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityZone>;

    /**
     * 
     * @summary Retrieve a volunteer skill by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    getVolunteerSkillRaw(requestParameters: GetVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerSkill>>;

    /**
     * Retrieve a volunteer skill by ID
     */
    getVolunteerSkill(requestParameters: GetVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerSkill>;

    /**
     * 
     * @summary List volunteer availability times
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    listVolunteerAvailabilityTimesRaw(requestParameters: ListVolunteerAvailabilityTimesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VolunteerAvailabilityTime>>>;

    /**
     * List volunteer availability times
     */
    listVolunteerAvailabilityTimes(requestParameters: ListVolunteerAvailabilityTimesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VolunteerAvailabilityTime>>;

    /**
     * 
     * @summary List volunteer availability zones
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    listVolunteerAvailabilityZonesRaw(requestParameters: ListVolunteerAvailabilityZonesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VolunteerAvailabilityZone>>>;

    /**
     * List volunteer availability zones
     */
    listVolunteerAvailabilityZones(requestParameters: ListVolunteerAvailabilityZonesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VolunteerAvailabilityZone>>;

    /**
     * 
     * @summary List volunteer skills
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    listVolunteerSkillsRaw(requestParameters: ListVolunteerSkillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VolunteerSkill>>>;

    /**
     * List volunteer skills
     */
    listVolunteerSkills(requestParameters: ListVolunteerSkillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VolunteerSkill>>;

    /**
     * 
     * @summary Update a volunteer availability time by ID
     * @param {string} id UUID of the resource
     * @param {VolunteerAvailabilityTimeUpdate} volunteerAvailabilityTimeUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    updateVolunteerAvailabilityTimeRaw(requestParameters: UpdateVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityTime>>;

    /**
     * Update a volunteer availability time by ID
     */
    updateVolunteerAvailabilityTime(requestParameters: UpdateVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityTime>;

    /**
     * 
     * @summary Update a volunteer availability zone by ID
     * @param {string} id UUID of the resource
     * @param {VolunteerAvailabilityZoneUpdate} volunteerAvailabilityZoneUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    updateVolunteerAvailabilityZoneRaw(requestParameters: UpdateVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityZone>>;

    /**
     * Update a volunteer availability zone by ID
     */
    updateVolunteerAvailabilityZone(requestParameters: UpdateVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityZone>;

    /**
     * 
     * @summary Update a volunteer skill by ID
     * @param {string} id UUID of the resource
     * @param {VolunteerSkillUpdate} volunteerSkillUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolunteerMetaApiInterface
     */
    updateVolunteerSkillRaw(requestParameters: UpdateVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerSkill>>;

    /**
     * Update a volunteer skill by ID
     */
    updateVolunteerSkill(requestParameters: UpdateVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerSkill>;

}

/**
 * 
 */
export class VolunteerMetaApi extends runtime.BaseAPI implements VolunteerMetaApiInterface {

    /**
     * Create volunteer availability time
     */
    async createVolunteerAvailabilityTimeRaw(requestParameters: CreateVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityTime>> {
        if (requestParameters['volunteerAvailabilityTimeCreate'] == null) {
            throw new runtime.RequiredError(
                'volunteerAvailabilityTimeCreate',
                'Required parameter "volunteerAvailabilityTimeCreate" was null or undefined when calling createVolunteerAvailabilityTime().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-time`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerAvailabilityTimeCreateToJSON(requestParameters['volunteerAvailabilityTimeCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerAvailabilityTimeFromJSON(jsonValue));
    }

    /**
     * Create volunteer availability time
     */
    async createVolunteerAvailabilityTime(requestParameters: CreateVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityTime> {
        const response = await this.createVolunteerAvailabilityTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create volunteer availability zone
     */
    async createVolunteerAvailabilityZoneRaw(requestParameters: CreateVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityZone>> {
        if (requestParameters['volunteerAvailabilityZoneCreate'] == null) {
            throw new runtime.RequiredError(
                'volunteerAvailabilityZoneCreate',
                'Required parameter "volunteerAvailabilityZoneCreate" was null or undefined when calling createVolunteerAvailabilityZone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-zones`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerAvailabilityZoneCreateToJSON(requestParameters['volunteerAvailabilityZoneCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerAvailabilityZoneFromJSON(jsonValue));
    }

    /**
     * Create volunteer availability zone
     */
    async createVolunteerAvailabilityZone(requestParameters: CreateVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityZone> {
        const response = await this.createVolunteerAvailabilityZoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create volunteer skill
     */
    async createVolunteerSkillRaw(requestParameters: CreateVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerSkill>> {
        if (requestParameters['volunteerSkillCreate'] == null) {
            throw new runtime.RequiredError(
                'volunteerSkillCreate',
                'Required parameter "volunteerSkillCreate" was null or undefined when calling createVolunteerSkill().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-skills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerSkillCreateToJSON(requestParameters['volunteerSkillCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerSkillFromJSON(jsonValue));
    }

    /**
     * Create volunteer skill
     */
    async createVolunteerSkill(requestParameters: CreateVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerSkill> {
        const response = await this.createVolunteerSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a volunteer availability time by ID
     */
    async deleteVolunteerAvailabilityTimeRaw(requestParameters: DeleteVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteVolunteerAvailabilityTime().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-time/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a volunteer availability time by ID
     */
    async deleteVolunteerAvailabilityTime(requestParameters: DeleteVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVolunteerAvailabilityTimeRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a volunteer availability zone by ID
     */
    async deleteVolunteerAvailabilityZoneRaw(requestParameters: DeleteVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteVolunteerAvailabilityZone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-zones/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a volunteer availability zone by ID
     */
    async deleteVolunteerAvailabilityZone(requestParameters: DeleteVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVolunteerAvailabilityZoneRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a volunteer skill by ID
     */
    async deleteVolunteerSkillRaw(requestParameters: DeleteVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteVolunteerSkill().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a volunteer skill by ID
     */
    async deleteVolunteerSkill(requestParameters: DeleteVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVolunteerSkillRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a volunteer availability time by ID
     */
    async getVolunteerAvailabilityTimeRaw(requestParameters: GetVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityTime>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVolunteerAvailabilityTime().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-time/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerAvailabilityTimeFromJSON(jsonValue));
    }

    /**
     * Retrieve a volunteer availability time by ID
     */
    async getVolunteerAvailabilityTime(requestParameters: GetVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityTime> {
        const response = await this.getVolunteerAvailabilityTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a volunteer availability zone by ID
     */
    async getVolunteerAvailabilityZoneRaw(requestParameters: GetVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityZone>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVolunteerAvailabilityZone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-zones/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerAvailabilityZoneFromJSON(jsonValue));
    }

    /**
     * Retrieve a volunteer availability zone by ID
     */
    async getVolunteerAvailabilityZone(requestParameters: GetVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityZone> {
        const response = await this.getVolunteerAvailabilityZoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a volunteer skill by ID
     */
    async getVolunteerSkillRaw(requestParameters: GetVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerSkill>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVolunteerSkill().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerSkillFromJSON(jsonValue));
    }

    /**
     * Retrieve a volunteer skill by ID
     */
    async getVolunteerSkill(requestParameters: GetVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerSkill> {
        const response = await this.getVolunteerSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List volunteer availability times
     */
    async listVolunteerAvailabilityTimesRaw(requestParameters: ListVolunteerAvailabilityTimesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VolunteerAvailabilityTime>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-time`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VolunteerAvailabilityTimeFromJSON));
    }

    /**
     * List volunteer availability times
     */
    async listVolunteerAvailabilityTimes(requestParameters: ListVolunteerAvailabilityTimesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VolunteerAvailabilityTime>> {
        const response = await this.listVolunteerAvailabilityTimesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List volunteer availability zones
     */
    async listVolunteerAvailabilityZonesRaw(requestParameters: ListVolunteerAvailabilityZonesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VolunteerAvailabilityZone>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-zones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VolunteerAvailabilityZoneFromJSON));
    }

    /**
     * List volunteer availability zones
     */
    async listVolunteerAvailabilityZones(requestParameters: ListVolunteerAvailabilityZonesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VolunteerAvailabilityZone>> {
        const response = await this.listVolunteerAvailabilityZonesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List volunteer skills
     */
    async listVolunteerSkillsRaw(requestParameters: ListVolunteerSkillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VolunteerSkill>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-skills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VolunteerSkillFromJSON));
    }

    /**
     * List volunteer skills
     */
    async listVolunteerSkills(requestParameters: ListVolunteerSkillsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VolunteerSkill>> {
        const response = await this.listVolunteerSkillsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a volunteer availability time by ID
     */
    async updateVolunteerAvailabilityTimeRaw(requestParameters: UpdateVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityTime>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateVolunteerAvailabilityTime().'
            );
        }

        if (requestParameters['volunteerAvailabilityTimeUpdate'] == null) {
            throw new runtime.RequiredError(
                'volunteerAvailabilityTimeUpdate',
                'Required parameter "volunteerAvailabilityTimeUpdate" was null or undefined when calling updateVolunteerAvailabilityTime().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-time/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerAvailabilityTimeUpdateToJSON(requestParameters['volunteerAvailabilityTimeUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerAvailabilityTimeFromJSON(jsonValue));
    }

    /**
     * Update a volunteer availability time by ID
     */
    async updateVolunteerAvailabilityTime(requestParameters: UpdateVolunteerAvailabilityTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityTime> {
        const response = await this.updateVolunteerAvailabilityTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a volunteer availability zone by ID
     */
    async updateVolunteerAvailabilityZoneRaw(requestParameters: UpdateVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerAvailabilityZone>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateVolunteerAvailabilityZone().'
            );
        }

        if (requestParameters['volunteerAvailabilityZoneUpdate'] == null) {
            throw new runtime.RequiredError(
                'volunteerAvailabilityZoneUpdate',
                'Required parameter "volunteerAvailabilityZoneUpdate" was null or undefined when calling updateVolunteerAvailabilityZone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-availability-zones/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerAvailabilityZoneUpdateToJSON(requestParameters['volunteerAvailabilityZoneUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerAvailabilityZoneFromJSON(jsonValue));
    }

    /**
     * Update a volunteer availability zone by ID
     */
    async updateVolunteerAvailabilityZone(requestParameters: UpdateVolunteerAvailabilityZoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerAvailabilityZone> {
        const response = await this.updateVolunteerAvailabilityZoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a volunteer skill by ID
     */
    async updateVolunteerSkillRaw(requestParameters: UpdateVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolunteerSkill>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateVolunteerSkill().'
            );
        }

        if (requestParameters['volunteerSkillUpdate'] == null) {
            throw new runtime.RequiredError(
                'volunteerSkillUpdate',
                'Required parameter "volunteerSkillUpdate" was null or undefined when calling updateVolunteerSkill().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/volunteer-skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerSkillUpdateToJSON(requestParameters['volunteerSkillUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerSkillFromJSON(jsonValue));
    }

    /**
     * Update a volunteer skill by ID
     */
    async updateVolunteerSkill(requestParameters: UpdateVolunteerSkillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolunteerSkill> {
        const response = await this.updateVolunteerSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
