/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Donation,
  DonationCreate,
  DonationUpdate,
  ErrorResponse,
} from '../models/index';
import {
    DonationFromJSON,
    DonationToJSON,
    DonationCreateFromJSON,
    DonationCreateToJSON,
    DonationUpdateFromJSON,
    DonationUpdateToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CreateDonationRequest {
    donationCreate: DonationCreate;
}

export interface CreateDonationForDonorRequest {
    donorId: string;
    donationCreate: DonationCreate;
}

export interface DeleteDonationRequest {
    id: string;
}

export interface GetDonationRequest {
    id: string;
}

export interface ListDonationsRequest {
    limit?: number;
    offset?: number;
}

export interface ListDonationsByDonorRequest {
    donorId: string;
    limit?: number;
    offset?: number;
}

export interface UpdateDonationRequest {
    id: string;
    donationUpdate: DonationUpdate;
}

/**
 * DonationsApi - interface
 * 
 * @export
 * @interface DonationsApiInterface
 */
export interface DonationsApiInterface {
    /**
     * 
     * @summary Create a new donation
     * @param {DonationCreate} donationCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonationsApiInterface
     */
    createDonationRaw(requestParameters: CreateDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donation>>;

    /**
     * Create a new donation
     */
    createDonation(requestParameters: CreateDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donation>;

    /**
     * 
     * @summary Create a new donation for a specific donor
     * @param {string} donorId UUID of the donor
     * @param {DonationCreate} donationCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonationsApiInterface
     */
    createDonationForDonorRaw(requestParameters: CreateDonationForDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donation>>;

    /**
     * Create a new donation for a specific donor
     */
    createDonationForDonor(requestParameters: CreateDonationForDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donation>;

    /**
     * 
     * @summary Delete a donation by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonationsApiInterface
     */
    deleteDonationRaw(requestParameters: DeleteDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a donation by ID
     */
    deleteDonation(requestParameters: DeleteDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve a donation by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonationsApiInterface
     */
    getDonationRaw(requestParameters: GetDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donation>>;

    /**
     * Retrieve a donation by ID
     */
    getDonation(requestParameters: GetDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donation>;

    /**
     * 
     * @summary List donations
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonationsApiInterface
     */
    listDonationsRaw(requestParameters: ListDonationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Donation>>>;

    /**
     * List donations
     */
    listDonations(requestParameters: ListDonationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Donation>>;

    /**
     * 
     * @summary List all donations for a specific donor
     * @param {string} donorId UUID of the donor
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonationsApiInterface
     */
    listDonationsByDonorRaw(requestParameters: ListDonationsByDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Donation>>>;

    /**
     * List all donations for a specific donor
     */
    listDonationsByDonor(requestParameters: ListDonationsByDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Donation>>;

    /**
     * 
     * @summary Update a donation by ID
     * @param {string} id UUID of the resource
     * @param {DonationUpdate} donationUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonationsApiInterface
     */
    updateDonationRaw(requestParameters: UpdateDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donation>>;

    /**
     * Update a donation by ID
     */
    updateDonation(requestParameters: UpdateDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donation>;

}

/**
 * 
 */
export class DonationsApi extends runtime.BaseAPI implements DonationsApiInterface {

    /**
     * Create a new donation
     */
    async createDonationRaw(requestParameters: CreateDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donation>> {
        if (requestParameters['donationCreate'] == null) {
            throw new runtime.RequiredError(
                'donationCreate',
                'Required parameter "donationCreate" was null or undefined when calling createDonation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DonationCreateToJSON(requestParameters['donationCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonationFromJSON(jsonValue));
    }

    /**
     * Create a new donation
     */
    async createDonation(requestParameters: CreateDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donation> {
        const response = await this.createDonationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new donation for a specific donor
     */
    async createDonationForDonorRaw(requestParameters: CreateDonationForDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donation>> {
        if (requestParameters['donorId'] == null) {
            throw new runtime.RequiredError(
                'donorId',
                'Required parameter "donorId" was null or undefined when calling createDonationForDonor().'
            );
        }

        if (requestParameters['donationCreate'] == null) {
            throw new runtime.RequiredError(
                'donationCreate',
                'Required parameter "donationCreate" was null or undefined when calling createDonationForDonor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donors/{donorId}/donations`.replace(`{${"donorId"}}`, encodeURIComponent(String(requestParameters['donorId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DonationCreateToJSON(requestParameters['donationCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonationFromJSON(jsonValue));
    }

    /**
     * Create a new donation for a specific donor
     */
    async createDonationForDonor(requestParameters: CreateDonationForDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donation> {
        const response = await this.createDonationForDonorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a donation by ID
     */
    async deleteDonationRaw(requestParameters: DeleteDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDonation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a donation by ID
     */
    async deleteDonation(requestParameters: DeleteDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDonationRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a donation by ID
     */
    async getDonationRaw(requestParameters: GetDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDonation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonationFromJSON(jsonValue));
    }

    /**
     * Retrieve a donation by ID
     */
    async getDonation(requestParameters: GetDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donation> {
        const response = await this.getDonationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List donations
     */
    async listDonationsRaw(requestParameters: ListDonationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Donation>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DonationFromJSON));
    }

    /**
     * List donations
     */
    async listDonations(requestParameters: ListDonationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Donation>> {
        const response = await this.listDonationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all donations for a specific donor
     */
    async listDonationsByDonorRaw(requestParameters: ListDonationsByDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Donation>>> {
        if (requestParameters['donorId'] == null) {
            throw new runtime.RequiredError(
                'donorId',
                'Required parameter "donorId" was null or undefined when calling listDonationsByDonor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donors/{donorId}/donations`.replace(`{${"donorId"}}`, encodeURIComponent(String(requestParameters['donorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DonationFromJSON));
    }

    /**
     * List all donations for a specific donor
     */
    async listDonationsByDonor(requestParameters: ListDonationsByDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Donation>> {
        const response = await this.listDonationsByDonorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a donation by ID
     */
    async updateDonationRaw(requestParameters: UpdateDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDonation().'
            );
        }

        if (requestParameters['donationUpdate'] == null) {
            throw new runtime.RequiredError(
                'donationUpdate',
                'Required parameter "donationUpdate" was null or undefined when calling updateDonation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DonationUpdateToJSON(requestParameters['donationUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonationFromJSON(jsonValue));
    }

    /**
     * Update a donation by ID
     */
    async updateDonation(requestParameters: UpdateDonationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donation> {
        const response = await this.updateDonationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
