/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  TicketAttachment,
  TicketAttachmentCreate,
  TicketAttachmentUpdate,
  TicketNote,
  TicketNoteCreate,
  TicketNoteUpdate,
  TicketTag,
  TicketTagCreate,
  TicketTagUpdate,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TicketAttachmentFromJSON,
    TicketAttachmentToJSON,
    TicketAttachmentCreateFromJSON,
    TicketAttachmentCreateToJSON,
    TicketAttachmentUpdateFromJSON,
    TicketAttachmentUpdateToJSON,
    TicketNoteFromJSON,
    TicketNoteToJSON,
    TicketNoteCreateFromJSON,
    TicketNoteCreateToJSON,
    TicketNoteUpdateFromJSON,
    TicketNoteUpdateToJSON,
    TicketTagFromJSON,
    TicketTagToJSON,
    TicketTagCreateFromJSON,
    TicketTagCreateToJSON,
    TicketTagUpdateFromJSON,
    TicketTagUpdateToJSON,
} from '../models/index';

export interface CreateTicketAttachmentRequest {
    ticketAttachmentCreate: TicketAttachmentCreate;
}

export interface CreateTicketNoteRequest {
    ticketNoteCreate: TicketNoteCreate;
}

export interface CreateTicketTagRequest {
    ticketTagCreate: TicketTagCreate;
}

export interface DeleteTicketAttachmentRequest {
    id: string;
}

export interface DeleteTicketNoteRequest {
    id: string;
}

export interface DeleteTicketTagRequest {
    id: string;
}

export interface GetTicketAttachmentRequest {
    id: string;
}

export interface GetTicketNoteRequest {
    id: string;
}

export interface GetTicketTagRequest {
    id: string;
}

export interface ListTicketAttachmentsRequest {
    limit?: number;
    offset?: number;
}

export interface ListTicketNotesRequest {
    limit?: number;
    offset?: number;
}

export interface ListTicketTagsRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateTicketAttachmentRequest {
    id: string;
    ticketAttachmentUpdate: TicketAttachmentUpdate;
}

export interface UpdateTicketNoteRequest {
    id: string;
    ticketNoteUpdate: TicketNoteUpdate;
}

export interface UpdateTicketTagRequest {
    id: string;
    ticketTagUpdate: TicketTagUpdate;
}

/**
 * TicketMetaApi - interface
 * 
 * @export
 * @interface TicketMetaApiInterface
 */
export interface TicketMetaApiInterface {
    /**
     * 
     * @summary Create a ticket attachment
     * @param {TicketAttachmentCreate} ticketAttachmentCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    createTicketAttachmentRaw(requestParameters: CreateTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketAttachment>>;

    /**
     * Create a ticket attachment
     */
    createTicketAttachment(requestParameters: CreateTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketAttachment>;

    /**
     * 
     * @summary Create a ticket note
     * @param {TicketNoteCreate} ticketNoteCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    createTicketNoteRaw(requestParameters: CreateTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketNote>>;

    /**
     * Create a ticket note
     */
    createTicketNote(requestParameters: CreateTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketNote>;

    /**
     * 
     * @summary Create a ticket tag
     * @param {TicketTagCreate} ticketTagCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    createTicketTagRaw(requestParameters: CreateTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketTag>>;

    /**
     * Create a ticket tag
     */
    createTicketTag(requestParameters: CreateTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketTag>;

    /**
     * 
     * @summary Delete a ticket attachment by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    deleteTicketAttachmentRaw(requestParameters: DeleteTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a ticket attachment by ID
     */
    deleteTicketAttachment(requestParameters: DeleteTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a ticket note by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    deleteTicketNoteRaw(requestParameters: DeleteTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a ticket note by ID
     */
    deleteTicketNote(requestParameters: DeleteTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a ticket tag by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    deleteTicketTagRaw(requestParameters: DeleteTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a ticket tag by ID
     */
    deleteTicketTag(requestParameters: DeleteTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve a ticket attachment by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    getTicketAttachmentRaw(requestParameters: GetTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketAttachment>>;

    /**
     * Retrieve a ticket attachment by ID
     */
    getTicketAttachment(requestParameters: GetTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketAttachment>;

    /**
     * 
     * @summary Retrieve a ticket note by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    getTicketNoteRaw(requestParameters: GetTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketNote>>;

    /**
     * Retrieve a ticket note by ID
     */
    getTicketNote(requestParameters: GetTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketNote>;

    /**
     * 
     * @summary Retrieve a ticket tag by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    getTicketTagRaw(requestParameters: GetTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketTag>>;

    /**
     * Retrieve a ticket tag by ID
     */
    getTicketTag(requestParameters: GetTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketTag>;

    /**
     * 
     * @summary List ticket attachments
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    listTicketAttachmentsRaw(requestParameters: ListTicketAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketAttachment>>>;

    /**
     * List ticket attachments
     */
    listTicketAttachments(requestParameters: ListTicketAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketAttachment>>;

    /**
     * 
     * @summary List ticket notes
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    listTicketNotesRaw(requestParameters: ListTicketNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketNote>>>;

    /**
     * List ticket notes
     */
    listTicketNotes(requestParameters: ListTicketNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketNote>>;

    /**
     * 
     * @summary List ticket tags
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    listTicketTagsRaw(requestParameters: ListTicketTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketTag>>>;

    /**
     * List ticket tags
     */
    listTicketTags(requestParameters: ListTicketTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketTag>>;

    /**
     * 
     * @summary Update a ticket attachment by ID
     * @param {string} id UUID of the resource
     * @param {TicketAttachmentUpdate} ticketAttachmentUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    updateTicketAttachmentRaw(requestParameters: UpdateTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketAttachment>>;

    /**
     * Update a ticket attachment by ID
     */
    updateTicketAttachment(requestParameters: UpdateTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketAttachment>;

    /**
     * 
     * @summary Update a ticket note by ID
     * @param {string} id UUID of the resource
     * @param {TicketNoteUpdate} ticketNoteUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    updateTicketNoteRaw(requestParameters: UpdateTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketNote>>;

    /**
     * Update a ticket note by ID
     */
    updateTicketNote(requestParameters: UpdateTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketNote>;

    /**
     * 
     * @summary Update a ticket tag by ID
     * @param {string} id UUID of the resource
     * @param {TicketTagUpdate} ticketTagUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMetaApiInterface
     */
    updateTicketTagRaw(requestParameters: UpdateTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketTag>>;

    /**
     * Update a ticket tag by ID
     */
    updateTicketTag(requestParameters: UpdateTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketTag>;

}

/**
 * 
 */
export class TicketMetaApi extends runtime.BaseAPI implements TicketMetaApiInterface {

    /**
     * Create a ticket attachment
     */
    async createTicketAttachmentRaw(requestParameters: CreateTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketAttachment>> {
        if (requestParameters['ticketAttachmentCreate'] == null) {
            throw new runtime.RequiredError(
                'ticketAttachmentCreate',
                'Required parameter "ticketAttachmentCreate" was null or undefined when calling createTicketAttachment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-attachments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketAttachmentCreateToJSON(requestParameters['ticketAttachmentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketAttachmentFromJSON(jsonValue));
    }

    /**
     * Create a ticket attachment
     */
    async createTicketAttachment(requestParameters: CreateTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketAttachment> {
        const response = await this.createTicketAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a ticket note
     */
    async createTicketNoteRaw(requestParameters: CreateTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketNote>> {
        if (requestParameters['ticketNoteCreate'] == null) {
            throw new runtime.RequiredError(
                'ticketNoteCreate',
                'Required parameter "ticketNoteCreate" was null or undefined when calling createTicketNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketNoteCreateToJSON(requestParameters['ticketNoteCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketNoteFromJSON(jsonValue));
    }

    /**
     * Create a ticket note
     */
    async createTicketNote(requestParameters: CreateTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketNote> {
        const response = await this.createTicketNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a ticket tag
     */
    async createTicketTagRaw(requestParameters: CreateTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketTag>> {
        if (requestParameters['ticketTagCreate'] == null) {
            throw new runtime.RequiredError(
                'ticketTagCreate',
                'Required parameter "ticketTagCreate" was null or undefined when calling createTicketTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketTagCreateToJSON(requestParameters['ticketTagCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketTagFromJSON(jsonValue));
    }

    /**
     * Create a ticket tag
     */
    async createTicketTag(requestParameters: CreateTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketTag> {
        const response = await this.createTicketTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a ticket attachment by ID
     */
    async deleteTicketAttachmentRaw(requestParameters: DeleteTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTicketAttachment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-attachments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a ticket attachment by ID
     */
    async deleteTicketAttachment(requestParameters: DeleteTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTicketAttachmentRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a ticket note by ID
     */
    async deleteTicketNoteRaw(requestParameters: DeleteTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTicketNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a ticket note by ID
     */
    async deleteTicketNote(requestParameters: DeleteTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTicketNoteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a ticket tag by ID
     */
    async deleteTicketTagRaw(requestParameters: DeleteTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTicketTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a ticket tag by ID
     */
    async deleteTicketTag(requestParameters: DeleteTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTicketTagRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a ticket attachment by ID
     */
    async getTicketAttachmentRaw(requestParameters: GetTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketAttachment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTicketAttachment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-attachments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketAttachmentFromJSON(jsonValue));
    }

    /**
     * Retrieve a ticket attachment by ID
     */
    async getTicketAttachment(requestParameters: GetTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketAttachment> {
        const response = await this.getTicketAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a ticket note by ID
     */
    async getTicketNoteRaw(requestParameters: GetTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketNote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTicketNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketNoteFromJSON(jsonValue));
    }

    /**
     * Retrieve a ticket note by ID
     */
    async getTicketNote(requestParameters: GetTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketNote> {
        const response = await this.getTicketNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a ticket tag by ID
     */
    async getTicketTagRaw(requestParameters: GetTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTicketTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketTagFromJSON(jsonValue));
    }

    /**
     * Retrieve a ticket tag by ID
     */
    async getTicketTag(requestParameters: GetTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketTag> {
        const response = await this.getTicketTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ticket attachments
     */
    async listTicketAttachmentsRaw(requestParameters: ListTicketAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketAttachment>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-attachments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketAttachmentFromJSON));
    }

    /**
     * List ticket attachments
     */
    async listTicketAttachments(requestParameters: ListTicketAttachmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketAttachment>> {
        const response = await this.listTicketAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ticket notes
     */
    async listTicketNotesRaw(requestParameters: ListTicketNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketNote>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-notes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketNoteFromJSON));
    }

    /**
     * List ticket notes
     */
    async listTicketNotes(requestParameters: ListTicketNotesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketNote>> {
        const response = await this.listTicketNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ticket tags
     */
    async listTicketTagsRaw(requestParameters: ListTicketTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketTag>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketTagFromJSON));
    }

    /**
     * List ticket tags
     */
    async listTicketTags(requestParameters: ListTicketTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketTag>> {
        const response = await this.listTicketTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a ticket attachment by ID
     */
    async updateTicketAttachmentRaw(requestParameters: UpdateTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketAttachment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTicketAttachment().'
            );
        }

        if (requestParameters['ticketAttachmentUpdate'] == null) {
            throw new runtime.RequiredError(
                'ticketAttachmentUpdate',
                'Required parameter "ticketAttachmentUpdate" was null or undefined when calling updateTicketAttachment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-attachments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TicketAttachmentUpdateToJSON(requestParameters['ticketAttachmentUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketAttachmentFromJSON(jsonValue));
    }

    /**
     * Update a ticket attachment by ID
     */
    async updateTicketAttachment(requestParameters: UpdateTicketAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketAttachment> {
        const response = await this.updateTicketAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a ticket note by ID
     */
    async updateTicketNoteRaw(requestParameters: UpdateTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketNote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTicketNote().'
            );
        }

        if (requestParameters['ticketNoteUpdate'] == null) {
            throw new runtime.RequiredError(
                'ticketNoteUpdate',
                'Required parameter "ticketNoteUpdate" was null or undefined when calling updateTicketNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TicketNoteUpdateToJSON(requestParameters['ticketNoteUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketNoteFromJSON(jsonValue));
    }

    /**
     * Update a ticket note by ID
     */
    async updateTicketNote(requestParameters: UpdateTicketNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketNote> {
        const response = await this.updateTicketNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a ticket tag by ID
     */
    async updateTicketTagRaw(requestParameters: UpdateTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTicketTag().'
            );
        }

        if (requestParameters['ticketTagUpdate'] == null) {
            throw new runtime.RequiredError(
                'ticketTagUpdate',
                'Required parameter "ticketTagUpdate" was null or undefined when calling updateTicketTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ticket-tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TicketTagUpdateToJSON(requestParameters['ticketTagUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketTagFromJSON(jsonValue));
    }

    /**
     * Update a ticket tag by ID
     */
    async updateTicketTag(requestParameters: UpdateTicketTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketTag> {
        const response = await this.updateTicketTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
