/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Shift,
  ShiftCreate,
  ShiftUpdate,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ShiftFromJSON,
    ShiftToJSON,
    ShiftCreateFromJSON,
    ShiftCreateToJSON,
    ShiftUpdateFromJSON,
    ShiftUpdateToJSON,
} from '../models/index';

export interface CreateShiftRequest {
    shiftCreate: ShiftCreate;
}

export interface DeleteShiftRequest {
    id: string;
}

export interface GetShiftRequest {
    id: string;
}

export interface ListShiftsRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateShiftRequest {
    id: string;
    shiftUpdate: ShiftUpdate;
}

/**
 * ShiftsApi - interface
 * 
 * @export
 * @interface ShiftsApiInterface
 */
export interface ShiftsApiInterface {
    /**
     * 
     * @summary Create a shift
     * @param {ShiftCreate} shiftCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiInterface
     */
    createShiftRaw(requestParameters: CreateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shift>>;

    /**
     * Create a shift
     */
    createShift(requestParameters: CreateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shift>;

    /**
     * 
     * @summary Delete a shift by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiInterface
     */
    deleteShiftRaw(requestParameters: DeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a shift by ID
     */
    deleteShift(requestParameters: DeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve a shift by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiInterface
     */
    getShiftRaw(requestParameters: GetShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shift>>;

    /**
     * Retrieve a shift by ID
     */
    getShift(requestParameters: GetShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shift>;

    /**
     * 
     * @summary List shifts
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiInterface
     */
    listShiftsRaw(requestParameters: ListShiftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Shift>>>;

    /**
     * List shifts
     */
    listShifts(requestParameters: ListShiftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Shift>>;

    /**
     * 
     * @summary Update a shift by ID
     * @param {string} id UUID of the resource
     * @param {ShiftUpdate} shiftUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiInterface
     */
    updateShiftRaw(requestParameters: UpdateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shift>>;

    /**
     * Update a shift by ID
     */
    updateShift(requestParameters: UpdateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shift>;

}

/**
 * 
 */
export class ShiftsApi extends runtime.BaseAPI implements ShiftsApiInterface {

    /**
     * Create a shift
     */
    async createShiftRaw(requestParameters: CreateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shift>> {
        if (requestParameters['shiftCreate'] == null) {
            throw new runtime.RequiredError(
                'shiftCreate',
                'Required parameter "shiftCreate" was null or undefined when calling createShift().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shifts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShiftCreateToJSON(requestParameters['shiftCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShiftFromJSON(jsonValue));
    }

    /**
     * Create a shift
     */
    async createShift(requestParameters: CreateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shift> {
        const response = await this.createShiftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a shift by ID
     */
    async deleteShiftRaw(requestParameters: DeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteShift().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shifts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a shift by ID
     */
    async deleteShift(requestParameters: DeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShiftRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a shift by ID
     */
    async getShiftRaw(requestParameters: GetShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shift>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getShift().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shifts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShiftFromJSON(jsonValue));
    }

    /**
     * Retrieve a shift by ID
     */
    async getShift(requestParameters: GetShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shift> {
        const response = await this.getShiftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List shifts
     */
    async listShiftsRaw(requestParameters: ListShiftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Shift>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shifts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShiftFromJSON));
    }

    /**
     * List shifts
     */
    async listShifts(requestParameters: ListShiftsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Shift>> {
        const response = await this.listShiftsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a shift by ID
     */
    async updateShiftRaw(requestParameters: UpdateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shift>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateShift().'
            );
        }

        if (requestParameters['shiftUpdate'] == null) {
            throw new runtime.RequiredError(
                'shiftUpdate',
                'Required parameter "shiftUpdate" was null or undefined when calling updateShift().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shifts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ShiftUpdateToJSON(requestParameters['shiftUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShiftFromJSON(jsonValue));
    }

    /**
     * Update a shift by ID
     */
    async updateShift(requestParameters: UpdateShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shift> {
        const response = await this.updateShiftRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
