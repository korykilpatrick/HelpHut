/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Partner,
  PartnerCreate,
  PartnerUpdate,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PartnerFromJSON,
    PartnerToJSON,
    PartnerCreateFromJSON,
    PartnerCreateToJSON,
    PartnerUpdateFromJSON,
    PartnerUpdateToJSON,
} from '../models/index';

export interface CreatePartnerRequest {
    partnerCreate: PartnerCreate;
}

export interface DeletePartnerRequest {
    id: string;
}

export interface GetPartnerRequest {
    id: string;
}

export interface ListPartnersRequest {
    limit?: number;
    offset?: number;
}

export interface UpdatePartnerRequest {
    id: string;
    partnerUpdate: PartnerUpdate;
}

/**
 * PartnersApi - interface
 * 
 * @export
 * @interface PartnersApiInterface
 */
export interface PartnersApiInterface {
    /**
     * 
     * @summary Create a new partner
     * @param {PartnerCreate} partnerCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    createPartnerRaw(requestParameters: CreatePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Partner>>;

    /**
     * Create a new partner
     */
    createPartner(requestParameters: CreatePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Partner>;

    /**
     * 
     * @summary Delete a partner by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    deletePartnerRaw(requestParameters: DeletePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a partner by ID
     */
    deletePartner(requestParameters: DeletePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve a partner by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    getPartnerRaw(requestParameters: GetPartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Partner>>;

    /**
     * Retrieve a partner by ID
     */
    getPartner(requestParameters: GetPartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Partner>;

    /**
     * 
     * @summary List partners
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    listPartnersRaw(requestParameters: ListPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Partner>>>;

    /**
     * List partners
     */
    listPartners(requestParameters: ListPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Partner>>;

    /**
     * 
     * @summary Update a partner by ID
     * @param {string} id UUID of the resource
     * @param {PartnerUpdate} partnerUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    updatePartnerRaw(requestParameters: UpdatePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Partner>>;

    /**
     * Update a partner by ID
     */
    updatePartner(requestParameters: UpdatePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Partner>;

}

/**
 * 
 */
export class PartnersApi extends runtime.BaseAPI implements PartnersApiInterface {

    /**
     * Create a new partner
     */
    async createPartnerRaw(requestParameters: CreatePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Partner>> {
        if (requestParameters['partnerCreate'] == null) {
            throw new runtime.RequiredError(
                'partnerCreate',
                'Required parameter "partnerCreate" was null or undefined when calling createPartner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/partners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerCreateToJSON(requestParameters['partnerCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerFromJSON(jsonValue));
    }

    /**
     * Create a new partner
     */
    async createPartner(requestParameters: CreatePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Partner> {
        const response = await this.createPartnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a partner by ID
     */
    async deletePartnerRaw(requestParameters: DeletePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePartner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a partner by ID
     */
    async deletePartner(requestParameters: DeletePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePartnerRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a partner by ID
     */
    async getPartnerRaw(requestParameters: GetPartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Partner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPartner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerFromJSON(jsonValue));
    }

    /**
     * Retrieve a partner by ID
     */
    async getPartner(requestParameters: GetPartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Partner> {
        const response = await this.getPartnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List partners
     */
    async listPartnersRaw(requestParameters: ListPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Partner>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/partners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartnerFromJSON));
    }

    /**
     * List partners
     */
    async listPartners(requestParameters: ListPartnersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Partner>> {
        const response = await this.listPartnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a partner by ID
     */
    async updatePartnerRaw(requestParameters: UpdatePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Partner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePartner().'
            );
        }

        if (requestParameters['partnerUpdate'] == null) {
            throw new runtime.RequiredError(
                'partnerUpdate',
                'Required parameter "partnerUpdate" was null or undefined when calling updatePartner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerUpdateToJSON(requestParameters['partnerUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerFromJSON(jsonValue));
    }

    /**
     * Update a partner by ID
     */
    async updatePartner(requestParameters: UpdatePartnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Partner> {
        const response = await this.updatePartnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
