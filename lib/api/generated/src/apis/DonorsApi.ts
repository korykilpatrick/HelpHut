/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Donor,
  DonorCreate,
  DonorUpdate,
  ErrorResponse,
} from '../models/index';
import {
    DonorFromJSON,
    DonorToJSON,
    DonorCreateFromJSON,
    DonorCreateToJSON,
    DonorUpdateFromJSON,
    DonorUpdateToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CreateDonorRequest {
    donorCreate: DonorCreate;
}

export interface DeleteDonorRequest {
    id: string;
}

export interface GetDonorRequest {
    id: string;
}

export interface ListDonorsRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateDonorRequest {
    id: string;
    donorUpdate: DonorUpdate;
}

/**
 * DonorsApi - interface
 * 
 * @export
 * @interface DonorsApiInterface
 */
export interface DonorsApiInterface {
    /**
     * 
     * @summary Create a new donor
     * @param {DonorCreate} donorCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    createDonorRaw(requestParameters: CreateDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donor>>;

    /**
     * Create a new donor
     */
    createDonor(requestParameters: CreateDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donor>;

    /**
     * 
     * @summary Delete a donor by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    deleteDonorRaw(requestParameters: DeleteDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a donor by ID
     */
    deleteDonor(requestParameters: DeleteDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve a donor by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    getDonorRaw(requestParameters: GetDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donor>>;

    /**
     * Retrieve a donor by ID
     */
    getDonor(requestParameters: GetDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donor>;

    /**
     * 
     * @summary List donors
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    listDonorsRaw(requestParameters: ListDonorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Donor>>>;

    /**
     * List donors
     */
    listDonors(requestParameters: ListDonorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Donor>>;

    /**
     * 
     * @summary Update a donor by ID
     * @param {string} id UUID of the resource
     * @param {DonorUpdate} donorUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorsApiInterface
     */
    updateDonorRaw(requestParameters: UpdateDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donor>>;

    /**
     * Update a donor by ID
     */
    updateDonor(requestParameters: UpdateDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donor>;

}

/**
 * 
 */
export class DonorsApi extends runtime.BaseAPI implements DonorsApiInterface {

    /**
     * Create a new donor
     */
    async createDonorRaw(requestParameters: CreateDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donor>> {
        if (requestParameters['donorCreate'] == null) {
            throw new runtime.RequiredError(
                'donorCreate',
                'Required parameter "donorCreate" was null or undefined when calling createDonor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DonorCreateToJSON(requestParameters['donorCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonorFromJSON(jsonValue));
    }

    /**
     * Create a new donor
     */
    async createDonor(requestParameters: CreateDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donor> {
        const response = await this.createDonorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a donor by ID
     */
    async deleteDonorRaw(requestParameters: DeleteDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDonor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a donor by ID
     */
    async deleteDonor(requestParameters: DeleteDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDonorRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a donor by ID
     */
    async getDonorRaw(requestParameters: GetDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDonor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonorFromJSON(jsonValue));
    }

    /**
     * Retrieve a donor by ID
     */
    async getDonor(requestParameters: GetDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donor> {
        const response = await this.getDonorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List donors
     */
    async listDonorsRaw(requestParameters: ListDonorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Donor>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DonorFromJSON));
    }

    /**
     * List donors
     */
    async listDonors(requestParameters: ListDonorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Donor>> {
        const response = await this.listDonorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a donor by ID
     */
    async updateDonorRaw(requestParameters: UpdateDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDonor().'
            );
        }

        if (requestParameters['donorUpdate'] == null) {
            throw new runtime.RequiredError(
                'donorUpdate',
                'Required parameter "donorUpdate" was null or undefined when calling updateDonor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/donors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DonorUpdateToJSON(requestParameters['donorUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonorFromJSON(jsonValue));
    }

    /**
     * Update a donor by ID
     */
    async updateDonor(requestParameters: UpdateDonorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donor> {
        const response = await this.updateDonorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
