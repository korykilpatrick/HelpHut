/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Ticket,
  TicketCreate,
  TicketPriority,
  TicketStatus,
  TicketUpdate,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TicketFromJSON,
    TicketToJSON,
    TicketCreateFromJSON,
    TicketCreateToJSON,
    TicketPriorityFromJSON,
    TicketPriorityToJSON,
    TicketStatusFromJSON,
    TicketStatusToJSON,
    TicketUpdateFromJSON,
    TicketUpdateToJSON,
} from '../models/index';

export interface CreateTicketRequest {
    ticketCreate: TicketCreate;
}

export interface DeleteTicketRequest {
    id: string;
}

export interface GetTicketRequest {
    id: string;
}

export interface ListTicketsRequest {
    status?: TicketStatus;
    priority?: TicketPriority;
    limit?: number;
    offset?: number;
}

export interface UpdateTicketRequest {
    id: string;
    ticketUpdate: TicketUpdate;
}

/**
 * TicketsApi - interface
 * 
 * @export
 * @interface TicketsApiInterface
 */
export interface TicketsApiInterface {
    /**
     * 
     * @summary Create a new ticket
     * @param {TicketCreate} ticketCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApiInterface
     */
    createTicketRaw(requestParameters: CreateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>>;

    /**
     * Create a new ticket
     */
    createTicket(requestParameters: CreateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket>;

    /**
     * 
     * @summary Delete a ticket by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApiInterface
     */
    deleteTicketRaw(requestParameters: DeleteTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a ticket by ID
     */
    deleteTicket(requestParameters: DeleteTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Retrieve a ticket by ID
     * @param {string} id UUID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApiInterface
     */
    getTicketRaw(requestParameters: GetTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>>;

    /**
     * Retrieve a ticket by ID
     */
    getTicket(requestParameters: GetTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket>;

    /**
     * 
     * @summary List tickets
     * @param {TicketStatus} [status] Filter by ticket status
     * @param {TicketPriority} [priority] Filter by ticket priority
     * @param {number} [limit] Maximum number of items to return
     * @param {number} [offset] Number of items to skip before starting to collect results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApiInterface
     */
    listTicketsRaw(requestParameters: ListTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ticket>>>;

    /**
     * List tickets
     */
    listTickets(requestParameters: ListTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ticket>>;

    /**
     * 
     * @summary Update a ticket by ID
     * @param {string} id UUID of the resource
     * @param {TicketUpdate} ticketUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApiInterface
     */
    updateTicketRaw(requestParameters: UpdateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>>;

    /**
     * Update a ticket by ID
     */
    updateTicket(requestParameters: UpdateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket>;

}

/**
 * 
 */
export class TicketsApi extends runtime.BaseAPI implements TicketsApiInterface {

    /**
     * Create a new ticket
     */
    async createTicketRaw(requestParameters: CreateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['ticketCreate'] == null) {
            throw new runtime.RequiredError(
                'ticketCreate',
                'Required parameter "ticketCreate" was null or undefined when calling createTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tickets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketCreateToJSON(requestParameters['ticketCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Create a new ticket
     */
    async createTicket(requestParameters: CreateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.createTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a ticket by ID
     */
    async deleteTicketRaw(requestParameters: DeleteTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tickets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a ticket by ID
     */
    async deleteTicket(requestParameters: DeleteTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTicketRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a ticket by ID
     */
    async getTicketRaw(requestParameters: GetTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tickets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Retrieve a ticket by ID
     */
    async getTicket(requestParameters: GetTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.getTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List tickets
     */
    async listTicketsRaw(requestParameters: ListTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ticket>>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['priority'] != null) {
            queryParameters['priority'] = requestParameters['priority'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tickets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketFromJSON));
    }

    /**
     * List tickets
     */
    async listTickets(requestParameters: ListTicketsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ticket>> {
        const response = await this.listTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a ticket by ID
     */
    async updateTicketRaw(requestParameters: UpdateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTicket().'
            );
        }

        if (requestParameters['ticketUpdate'] == null) {
            throw new runtime.RequiredError(
                'ticketUpdate',
                'Required parameter "ticketUpdate" was null or undefined when calling updateTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tickets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TicketUpdateToJSON(requestParameters['ticketUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Update a ticket by ID
     */
    async updateTicket(requestParameters: UpdateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.updateTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
