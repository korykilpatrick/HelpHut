/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Volunteer
 */
export interface Volunteer {
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    vehicleType?: string;
    /**
     * 
     * @type {string}
     * @memberof Volunteer
     */
    locationId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Volunteer
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Volunteer
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the Volunteer interface.
 */
export function instanceOfVolunteer(value: object): value is Volunteer {
    return true;
}

export function VolunteerFromJSON(json: any): Volunteer {
    return VolunteerFromJSONTyped(json, false);
}

export function VolunteerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Volunteer {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'userId': json['user_id'] == null ? undefined : json['user_id'],
        'name': json['name'] == null ? undefined : json['name'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'vehicleType': json['vehicle_type'] == null ? undefined : json['vehicle_type'],
        'locationId': json['location_id'] == null ? undefined : json['location_id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

export function VolunteerToJSON(json: any): Volunteer {
    return VolunteerToJSONTyped(json, false);
}

export function VolunteerToJSONTyped(value?: Volunteer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'user_id': value['userId'],
        'name': value['name'],
        'email': value['email'],
        'phone': value['phone'],
        'vehicle_type': value['vehicleType'],
        'location_id': value['locationId'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

