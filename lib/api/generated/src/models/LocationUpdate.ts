/* tslint:disable */
/* eslint-disable */
/**
 * HelpHut Food Rescue Management
 * Centralized platform for coordinating food donations, volunteers, and partner organizations. Aligns with the HelpHut mission to efficiently rescue food in Austin, reduce waste, and help those in need. This specification is maintained under a TDD approach, with auto-generated tests ensuring coverage of each endpoint. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LocationUpdate
 */
export interface LocationUpdate {
    /**
     * 
     * @type {string}
     * @memberof LocationUpdate
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationUpdate
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationUpdate
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationUpdate
     */
    zip?: string;
    /**
     * 
     * @type {number}
     * @memberof LocationUpdate
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationUpdate
     */
    longitude?: number;
}

/**
 * Check if a given object implements the LocationUpdate interface.
 */
export function instanceOfLocationUpdate(value: object): value is LocationUpdate {
    return true;
}

export function LocationUpdateFromJSON(json: any): LocationUpdate {
    return LocationUpdateFromJSONTyped(json, false);
}

export function LocationUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationUpdate {
    if (json == null) {
        return json;
    }
    return {
        
        'street': json['street'] == null ? undefined : json['street'],
        'city': json['city'] == null ? undefined : json['city'],
        'state': json['state'] == null ? undefined : json['state'],
        'zip': json['zip'] == null ? undefined : json['zip'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
    };
}

export function LocationUpdateToJSON(json: any): LocationUpdate {
    return LocationUpdateToJSONTyped(json, false);
}

export function LocationUpdateToJSONTyped(value?: LocationUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'street': value['street'],
        'city': value['city'],
        'state': value['state'],
        'zip': value['zip'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
    };
}

